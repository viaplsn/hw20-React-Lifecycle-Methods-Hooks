{"version":3,"sources":["components/timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","time","currentNumber","setCurrentNumber","autostart","currentName","setCurrentName","timerPause","useRef","zeroTimer","divStyle","width","useEffect","ticker","setInterval","current","onTick","step","onTimeStart","onTimeEnd","clearInterval","className","Math","floor","toString","padStart","onClick","onTimePause","style","App","console","log","timeLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAEaA,EAAQ,SAACC,GAAW,IAAD,EACcC,mBAASD,EAAME,MAD7B,mBACrBC,EADqB,KACNC,EADM,OAEUH,mBAASD,EAAMK,UAAY,OAAS,SAF9C,mBAErBC,EAFqB,KAERC,EAFQ,KAGtBC,EAAaC,kBAAQT,EAAMK,WAC3BK,EAAYD,kBAAO,GACnBE,EAAWF,iBAAO,CACpBG,MAAO,SAGXC,qBAAU,WACN,IAAMC,EAASC,aAAY,WACpBZ,GAAiB,GAAKA,EAAgBH,EAAME,OAA+B,IAAvBM,EAAWQ,SAC9DhB,EAAMiB,OAAOd,EAAgB,GAC7BC,EAAiBD,EAAgBH,EAAMkB,KAAO,MACxCf,IAAkBH,EAAME,OAA+B,IAAvBM,EAAWQ,SACjDhB,EAAMmB,YAAYhB,GAClBH,EAAMiB,OAAOd,EAAgB,GAC7BC,EAAiBD,EAAgBH,EAAMkB,KAAO,MACtB,IAAlBf,IAA2C,IAApBH,EAAMK,UACnCD,EAAiBJ,EAAME,MAEvBE,EAAiBD,KAEtBH,EAAMkB,MAeT,OAbqB,IAAlBf,IAA2C,IAApBH,EAAMK,WAC5BK,EAAUM,SAAU,EACpBhB,EAAMoB,aACkB,IAAlBjB,IAA2C,IAApBH,EAAMK,WACnCL,EAAMoB,aAGgB,IAAvBZ,EAAWQ,UAA0C,IAAtBN,EAAUM,QACxCT,EAAe,SAEfA,EAAe,QAGb,WACFc,cAAcP,MAEnB,CAACd,EAAOG,IAkBX,OACI,sBAAKmB,UAAU,kBAAf,UACI,4BAAIC,KAAKC,MAAMrB,EAAc,IAAIsB,WAAWC,SAAS,EAAG,KAAO,KAAOvB,EAAgB,IAAIsB,WAAWC,SAAS,EAAG,OACjH,wBAAQJ,UAAU,aAAaK,QAlBzB,YACe,IAAtBjB,EAAUM,QACTR,EAAWQ,SAAWR,EAAWQ,SAEjCZ,EAAiBJ,EAAME,MACvBS,EAASK,QAAU,CAACJ,MAAO,QAC3BF,EAAUM,SAAU,IAEE,IAAvBR,EAAWQ,UACVhB,EAAM4B,cACNrB,EAAe,WAQf,SAAgDD,IAChD,qBAAKuB,MAAOlB,EAASK,QAAU,CAACJ,MAAyB,IAAjBT,EAAuBH,EAAME,KAAO,KAAMoB,UAAU,iBCrDzFQ,MATf,WACE,OACE,sBAAKR,UAAU,MAAf,UACE,cAAC,EAAD,CAAOpB,KAAM,EAAGG,WAAW,EAAOY,OAAQ,SAACf,GAAD,OAAU6B,QAAQC,IAAI,0FAAsB9B,IAAOgB,KAAM,IAAME,UAAW,kBAAMW,QAAQC,IAAI,6DAAgBb,YAAa,SAACc,GAAD,OAAcF,QAAQC,IAAI,iLAAuCC,IAAWL,YAAa,kBAAMG,QAAQC,IAAI,wFAC9Q,cAAC,EAAD,CAAO9B,KAAM,KAAMG,WAAW,EAAMY,OAAQ,SAACf,GAAD,OAAU6B,QAAQC,IAAI,0FAAsB9B,IAAOgB,KAAM,IAAME,UAAW,kBAAMW,QAAQC,IAAI,6DAAgBb,YAAa,SAACc,GAAD,OAAcF,QAAQC,IAAI,iLAAuCC,IAAWL,YAAa,kBAAMG,QAAQC,IAAI,4FCKvQE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d0b93029.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nexport const Timer = (props) => {\r\n    const [currentNumber, setCurrentNumber] = useState(props.time);\r\n    const [currentName, setCurrentName] = useState(props.autostart ? 'Stop' : 'Start');\r\n    const timerPause = useRef(!props.autostart)\r\n    const zeroTimer = useRef(false)\r\n    const divStyle = useRef({\r\n        width: '100%'\r\n    })\r\n\r\n    useEffect(() => {\r\n        const ticker = setInterval(() => {\r\n            if(currentNumber >= 1 && currentNumber < props.time && timerPause.current === false) {\r\n                props.onTick(currentNumber - 1)\r\n                setCurrentNumber(currentNumber - props.step / 1000)\r\n            } else if(currentNumber === props.time && timerPause.current === false) {\r\n                props.onTimeStart(currentNumber)\r\n                props.onTick(currentNumber - 1)\r\n                setCurrentNumber(currentNumber - props.step / 1000)\r\n            } else if(currentNumber === 0 && props.autostart === true) {\r\n                setCurrentNumber(props.time)\r\n            }else {\r\n                setCurrentNumber(currentNumber)\r\n            }\r\n        }, props.step)\r\n\r\n        if(currentNumber === 0 && props.autostart === false) {\r\n            zeroTimer.current = true\r\n            props.onTimeEnd()\r\n        } else if(currentNumber === 0 && props.autostart === true) {\r\n            props.onTimeEnd()\r\n        }\r\n\r\n        if(timerPause.current === true || zeroTimer.current === true) {\r\n            setCurrentName('Start')\r\n        } else {\r\n            setCurrentName('Stop')\r\n        }\r\n\r\n        return() => {\r\n            clearInterval(ticker)\r\n        }\r\n    }, [props, currentNumber])\r\n\r\n    \r\n    const pause = () => {\r\n        if(zeroTimer.current === false) {\r\n            timerPause.current = !timerPause.current\r\n        } else {\r\n            setCurrentNumber(props.time)\r\n            divStyle.current = {width: '100%'}\r\n            zeroTimer.current = false\r\n        }\r\n        if(timerPause.current === true) {\r\n            props.onTimePause()\r\n            setCurrentName('Start')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='timer-container'>\r\n            <p>{Math.floor(currentNumber/60).toString().padStart(2, '0') + \":\" + (currentNumber % 60).toString().padStart(2, '0')}</p>\r\n            <button className=\"start-stop\" onClick={pause}>{currentName}</button>\r\n            <div style={divStyle.current = {width: (currentNumber) * 100 / props.time + '%'}} className=\"timerDiv\"></div>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport { Timer } from './components/timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time={5} autostart={false} onTick={(time) => console.log(\"Залишилось часу: \" + time)} step={1000} onTimeEnd={() => console.log(\"Час вийшов!\")} onTimeStart={(timeLeft) => console.log(\"Таймер запущено! Залишилось часу: \" + timeLeft)} onTimePause={() => console.log(\"Таймер на паузі!\")} />\n      <Timer time={5962} autostart={true} onTick={(time) => console.log(\"Залишилось часу: \" + time)} step={2000} onTimeEnd={() => console.log(\"Час вийшов!\")} onTimeStart={(timeLeft) => console.log(\"Таймер запущено! Залишилось часу: \" + timeLeft)} onTimePause={() => console.log(\"Таймер на паузі!\")} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}